"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""
import os
import sys
import logging
import asyncio
import traceback
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command, CommandStart

from config import TELEGRAM_BOT_TOKEN, ADMIN_IDS, setup_logging
from bot.database.setup import setup_database, get_session
from bot.models import User, Category, City, Request, Distribution
from bot.services.user_service import UserService
from bot.services.request_service import RequestService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("=" * 50)
        logger.info(f"–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ {datetime.now()}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        setup_database()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        session = AiohttpSession()
        bot = Bot(token=TELEGRAM_BOT_TOKEN, session=session)
        dp = Dispatcher(storage=MemoryStorage())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @dp.message(CommandStart())
        async def start_command(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            user = message.from_user
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with get_session() as session:
                user_service = UserService(session)
                db_user = user_service.get_or_create_user(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏, "
                "–≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç\n"
                "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç–µ\n"
                "3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
                "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [types.KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
                [types.KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
                [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                [types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            
            await message.answer(
                welcome_text,
                reply_markup=reply_markup
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
        @dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        async def profile_menu(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            user = message.from_user
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            with get_session() as session:
                user_service = UserService(session)
                db_user = user_service.get_user_by_telegram_id(user.id)
                
                if not db_user:
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
                profile_text = f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º first_name –∏ last_name
                full_name = f"{db_user.first_name or ''} {db_user.last_name or ''}".strip()
                if not full_name:
                    full_name = db_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                profile_text += f"*–ò–º—è*: {full_name}\n"
                
                # –¢–µ–ª–µ—Ñ–æ–Ω
                phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
                if db_user.phone:
                    try:
                        from bot.utils import decrypt_personal_data, mask_phone_number
                        decrypted_phone = decrypt_personal_data(db_user.phone)
                        phone = mask_phone_number(decrypted_phone)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
                        phone = "–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"
                
                profile_text += f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {phone}\n\n"
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories = db_user.categories
                if categories:
                    profile_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*:\n"
                    for category in categories:
                        profile_text += f"- {category.name}\n"
                else:
                    profile_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*: –ù–µ –≤—ã–±—Ä–∞–Ω—ã\n"
                
                # –ì–æ—Ä–æ–¥–∞
                cities = db_user.cities
                if cities:
                    profile_text += "\n*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞*:\n"
                    for city in cities:
                        profile_text += f"- {city.name}\n"
                else:
                    profile_text += "\n*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞*: –ù–µ –≤—ã–±—Ä–∞–Ω—ã\n"
                
                # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                subcategories = db_user.subcategories
                if subcategories:
                    profile_text += "\n*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏*:\n"
                    for subcategory in subcategories:
                        profile_text += f"- {subcategory.name} ({subcategory.category.name})\n"
                else:
                    profile_text += "\n*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏*: –ù–µ –≤—ã–±—Ä–∞–Ω—ã\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [types.KeyboardButton(text="üîß –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"), types.KeyboardButton(text="üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞")],
                [types.KeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"), types.KeyboardButton(text="üîç –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
                [types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            
            await message.answer(
                profile_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        @dp.message(F.text == "üîß –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        async def select_categories(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            user = message.from_user
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            with get_session() as session:
                user_service = UserService(session)
                db_user = user_service.get_user_by_telegram_id(user.id)
                
                if not db_user:
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories = session.query(Category).filter(Category.is_active == True).all()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_categories = db_user.categories
                user_category_ids = [c.id for c in user_categories]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                keyboard = []
                for category in categories:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    status = "‚úÖ" if category.id in user_category_ids else "‚ùå"
                    keyboard.append([f"{status} {category.name}"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
                keyboard.append(["‚úÖ –ì–æ—Ç–æ–≤–æ"])
                keyboard.append(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
                
                reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
                
                # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                message_text = (
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ:\n\n"
                    "‚ùå - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n"
                    "‚úÖ - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞\n\n"
                    "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã.\n"
                    "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'."
                )
                
                await message.answer(
                    message_text,
                    reply_markup=reply_markup
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        @dp.message(lambda msg: msg.text and (msg.text.startswith("‚úÖ ") or msg.text.startswith("‚ùå ")))
        async def toggle_category(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            user = message.from_user
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            category_name = message.text[2:].strip()
            
            with get_session() as session:
                user_service = UserService(session)
                db_user = user_service.get_user_by_telegram_id(user.id)
                
                if not db_user:
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
                category = session.query(Category).filter(Category.name == category_name).first()
                
                if not category:
                    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                is_selected = message.text.startswith("‚úÖ ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if is_selected:
                    # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if category in db_user.categories:
                        db_user.categories.remove(category)
                        session.commit()
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if category not in db_user.categories:
                        db_user.categories.append(category)
                        session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                categories = session.query(Category).filter(Category.is_active == True).all()
                user_categories = db_user.categories
                user_category_ids = [c.id for c in user_categories]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                keyboard = []
                for cat in categories:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    status = "‚úÖ" if cat.id in user_category_ids else "‚ùå"
                    keyboard.append([f"{status} {cat.name}"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
                keyboard.append(["‚úÖ –ì–æ—Ç–æ–≤–æ"])
                keyboard.append(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
                
                reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
                
                await message.answer(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' {'—É–¥–∞–ª–µ–Ω–∞' if is_selected else '–¥–æ–±–∞–≤–ª–µ–Ω–∞'}.",
                    reply_markup=reply_markup
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞"
        @dp.message(F.text == "üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞")
        async def select_cities(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            user = message.from_user
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞
            with get_session() as session:
                user_service = UserService(session)
                db_user = user_service.get_user_by_telegram_id(user.id)
                
                if not db_user:
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
                cities = session.query(City).filter(City.is_active == True).all()
                
                # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_cities = db_user.cities
                user_city_ids = [c.id for c in user_cities]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
                keyboard = []
                for city in cities:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                    status = "‚úÖ" if city.id in user_city_ids else "‚ùå"
                    keyboard.append([f"{status} {city.name}"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
                keyboard.append(["‚úÖ –ì–æ—Ç–æ–≤–æ"])
                keyboard.append(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
                
                reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
                
                # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                message_text = (
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:\n\n"
                    "‚ùå - –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
                    "‚úÖ - –≥–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω\n\n"
                    "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã.\n"
                    "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'."
                )
                
                await message.answer(
                    message_text,
                    reply_markup=reply_markup
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
        @dp.message(F.text == "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
        async def edit_phone(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
            keyboard = [
                [types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
                reply_markup=reply_markup
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        @dp.message(F.text == "üîç –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        async def select_subcategories(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            await message.answer(
                "–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
        @dp.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
        async def my_requests(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ú–æ–∏ –∑–∞—è–≤–∫–∏' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            user = message.from_user
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with get_session() as session:
                    request_service = RequestService(session)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    distributions = await request_service.get_user_distributions(user.id)
                    
                    if not distributions:
                        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
                    requests_text = "üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏*:\n\n"
                    
                    for i, distribution in enumerate(distributions, 1):
                        request = distribution.request
                        status_emoji = {
                            "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "üì§",
                            "–ø—Ä–∏–Ω—è—Ç–æ": "‚úÖ",
                            "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ": "‚ùå",
                            "–∑–∞–≤–µ—Ä—à–µ–Ω–æ": "üèÅ",
                            "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": "‚è∞"
                        }.get(distribution.status, "‚ùì")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
                        requests_text += f"{i}. {status_emoji} *–ó–∞—è–≤–∫–∞ #{request.id}*\n"
                        requests_text += f"   üìÖ –î–∞—Ç–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                        requests_text += f"   üèôÔ∏è –ì–æ—Ä–æ–¥: {request.city.name if request.city else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        requests_text += f"   üîß –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category.name if request.category else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                        requests_text += f"   üìù –°—Ç–∞—Ç—É—Å: {distribution.status}\n\n"
                    
                    await message.answer(
                        requests_text,
                        parse_mode="Markdown"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        @dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        async def settings_menu(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [types.KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
                [types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            
            await message.answer(
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        @dp.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        async def back_to_main_menu(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [types.KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
                [types.KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
                [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                [types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            
            await message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=reply_markup
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
        @dp.message(F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
        async def done_button(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ'"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ì–æ—Ç–æ–≤–æ' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
            await profile_menu(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @dp.message()
        async def handle_all_messages(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
            if message.text and (message.text.startswith('+') or message.text.isdigit()):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                user = message.from_user
                phone = message.text.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                import re
                if not re.match(r'^\+?[0-9]{10,15}$', phone):
                    await message.answer(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                with get_session() as session:
                    user_service = UserService(session)
                    db_user = user_service.get_user_by_telegram_id(user.id)
                    
                    if not db_user:
                        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                        return
                    
                    # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                    from bot.utils import encrypt_personal_data
                    encrypted_phone = encrypt_personal_data(phone)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    db_user.phone = encrypted_phone
                    session.commit()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
                await profile_menu(message)
            else:
                # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await message.answer(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"ü§ñ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        traceback.print_exc() 