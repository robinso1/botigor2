import logging
from typing import Dict, Any, List, Optional, Union, Callable
from datetime import datetime
from sqlalchemy import func

from aiogram import types, Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from bot.database.setup import get_session
from bot.models import User, Category, City, Request, Distribution, RequestStatus
from bot.services.user_service import UserService
from bot.services.request_service import RequestService
from bot.utils import encrypt_personal_data, decrypt_personal_data, mask_phone_number
from bot.utils.demo_generator import generate_demo_request, get_demo_info_message
from config import ADMIN_IDS, DEFAULT_CATEGORIES, DEFAULT_CITIES
from bot.handlers.user_handlers import show_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    MAIN_MENU = State()
    USERS = State()
    CATEGORIES = State()
    ADD_CATEGORY = State()
    EDIT_CATEGORY = State()
    CITIES = State()
    ADD_CITY = State()
    EDIT_CITY = State()
    REQUESTS = State()
    VIEW_REQUEST = State()
    DISTRIBUTIONS = State()
    DEMO_GENERATION = State()
    STATS = State()
    
    @classmethod
    @property
    def states(cls):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        return [
            cls.MAIN_MENU, cls.USERS, cls.CATEGORIES, cls.ADD_CATEGORY, 
            cls.EDIT_CATEGORY, cls.CITIES, cls.ADD_CITY, cls.EDIT_CITY,
            cls.REQUESTS, cls.VIEW_REQUEST, cls.DISTRIBUTIONS, 
            cls.DEMO_GENERATION, cls.STATS
        ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ int, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        user_id = int(user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        return user_id in ADMIN_IDS
    except (ValueError, TypeError):
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID {user_id}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin_command(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    try:
        user = message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not await is_admin(user.id):
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        keyboard = [
            ["üîß –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "üèôÔ∏è –ì–æ—Ä–æ–¥–∞"],
            ["ü§ñ –î–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["üîÑ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"],
            ["üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üë®‚Äçüíº *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –≥–æ—Ä–æ–¥–∞–º–∏, "
            "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(AdminStates.MAIN_MENU)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_command: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def show_admin_menu(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üîß –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
                [KeyboardButton(text="üèôÔ∏è –ì–æ—Ä–æ–¥–∞"), KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="ü§ñ –î–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è")],
                [KeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")]
            ],
            resize_keyboard=True
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.set_state(AdminStates.MAIN_MENU)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def exit_admin_panel(message: types.Message, state: FSMContext) -> None:
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        await show_main_menu(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ exit_admin_panel: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def admin_categories(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        with get_session() as session:
            categories = session.query(Category).all()
            
            keyboard = []
            for category in categories:
                status = "‚úÖ" if category.is_active else "‚ùå"
                keyboard.append([KeyboardButton(text=f"{status} {category.name}")])
            
            keyboard.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")])
            keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")])
            
            reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            
            await message.answer(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —É—Å–ª—É–≥:\n"
                "‚úÖ - –∞–∫—Ç–∏–≤–Ω–∞, ‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.",
                reply_markup=reply_markup
            )
            
            await state.set_state(AdminStates.CATEGORIES)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_categories: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(AdminStates.MAIN_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def admin_add_category(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )
        await state.set_state(AdminStates.ADD_CATEGORY)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_add_category: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(AdminStates.MAIN_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def admin_save_category(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message, state)
        return
    
    try:
        category_name = message.text.strip()
        
        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_category = session.query(Category).filter(Category.name == category_name).first()
            
            if existing_category:
                await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                new_category = Category(name=category_name, is_active=True)
                session.add(new_category)
                session.commit()
                await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await admin_categories(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_save_category: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(AdminStates.MAIN_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def admin_toggle_category(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message, state)
        return
    
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await admin_add_category(message, state)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å)
        category_text = message.text
        if category_text.startswith("‚úÖ ") or category_text.startswith("‚ùå "):
            category_name = category_text[2:].strip()
            
            with get_session() as session:
                category = session.query(Category).filter(Category.name == category_name).first()
                
                if category:
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    category.is_active = not category.is_active
                    session.commit()
                    
                    status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if category.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' {status}.")
                else:
                    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await admin_categories(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_toggle_category: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(AdminStates.MAIN_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –≥–æ—Ä–æ–¥–æ–≤
async def admin_cities(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    with get_session() as session:
        cities = session.query(City).all()
        
        keyboard = []
        for city in cities:
            status = "‚úÖ" if city.is_active else "‚ùå"
            keyboard.append([KeyboardButton(text=f"{status} {city.name}")])
        
        keyboard.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")])
        keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏:\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–µ–Ω, ‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.",
            reply_markup=reply_markup
        )
        
        await state.set_state(AdminStates.CITIES)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
async def admin_add_city(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(AdminStates.ADD_CITY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
async def admin_save_city(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await admin_cities(message, state)
        return
    
    city_name = message.text.strip()
    
    with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥
        existing_city = session.query(City).filter(City.name == city_name).first()
        
        if existing_city:
            await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
            new_city = City(name=city_name, is_active=True)
            session.add(new_city)
            session.commit()
            await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
        await admin_cities(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ä–æ–¥–∞
async def admin_toggle_city(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message, state)
        return
    
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
        await admin_add_city(message, state)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å)
    city_text = message.text
    if city_text.startswith("‚úÖ ") or city_text.startswith("‚ùå "):
        city_name = city_text[2:].strip()
        
        with get_session() as session:
            city = session.query(City).filter(City.name == city_name).first()
            
            if city:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                city.is_active = not city.is_active
                session.commit()
                
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if city.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' {status}.")
            else:
                await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        await admin_cities(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def admin_demo_generation(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫"""
    try:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.set_state(AdminStates.DEMO_GENERATION)
        
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∑–∞—è–≤–æ–∫.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã "
            "–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–º–æ-–∑–∞—è–≤–∫–∞–º.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_demo_generation: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        await show_admin_menu(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∑–∞—è–≤–∫–∏
async def admin_generate_demo_request(message: types.Message, state: FSMContext) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–∑–∞—è–≤–∫—É"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message, state)
        return
        
    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫":
        await admin_demo_stats(message, state)
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–∑–∞—è–≤–∫—É
        request_data = generate_demo_request()
        
        if not request_data:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with get_session() as session:
            new_request = Request(
                client_name=request_data["client_name"],
                client_phone=request_data["client_phone"],
                description=request_data["description"],
                status=request_data["status"],
                is_demo=True,
                category_id=request_data["category_id"],
                city_id=request_data["city_id"],
                area=request_data.get("area"),
                address=request_data.get("address"),
                estimated_cost=request_data.get("estimated_cost"),
                extra_data=request_data.get("extra_data", {})
            )
            session.add(new_request)
            session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–µ
            category = session.query(Category).filter_by(id=request_data["category_id"]).first()
            city = session.query(City).filter_by(id=request_data["city_id"]).first()
            
            category_name = category.name if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            city_name = city.name if city else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
            info_text = (
                f"‚úÖ –î–µ–º–æ-–∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (ID: {new_request.id})\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_data['client_name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request_data['client_phone']}\n"
                f"üîß –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request_data['description']}\n"
                f"üìè –ü–ª–æ—â–∞–¥—å: {request_data.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤\n"
                f"üè† –ê–¥—Ä–µ—Å: {request_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {request_data.get('estimated_cost', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n\n"
                f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–∏—Å—Ç–µ–º—ã."
            )
            
            await message.answer(info_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
            await message.answer(
                "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n" + 
                get_demo_info_message("after_request"),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∑–∞—è–≤–∫–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∑–∞—è–≤–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫
async def admin_demo_stats(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–º–æ-–∑–∞—è–≤–∫–∞–º"""
    try:
        with get_session() as session:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫
            total_demo = session.query(func.count(Request.id)).filter(Request.is_demo == True).scalar()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for status in RequestStatus:
                count = session.query(func.count(Request.id)).filter(
                    Request.is_demo == True,
                    Request.status == status
                ).scalar()
                if count > 0:
                    status_counts[status.value] = count
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_counts = {}
            categories = session.query(Category).all()
            for category in categories:
                count = session.query(func.count(Request.id)).filter(
                    Request.is_demo == True,
                    Request.category_id == category.id
                ).scalar()
                if count > 0:
                    category_counts[category.name] = count
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º
            city_counts = {}
            cities = session.query(City).all()
            for city in cities:
                count = session.query(func.count(Request.id)).filter(
                    Request.is_demo == True,
                    Request.city_id == city.id
                ).scalar()
                if count > 0:
                    city_counts[city.name] = count
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫*\n\n"
            stats_text += f"–í—Å–µ–≥–æ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫: {total_demo}\n\n"
            
            if status_counts:
                stats_text += "*–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n"
                for status, count in status_counts.items():
                    stats_text += f"- {status}: {count}\n"
                stats_text += "\n"
            
            if category_counts:
                stats_text += "*–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for category, count in category_counts.items():
                    stats_text += f"- {category}: {count}\n"
                stats_text += "\n"
            
            if city_counts:
                stats_text += "*–ü–æ –≥–æ—Ä–æ–¥–∞–º:*\n"
                for city, count in city_counts.items():
                    stats_text += f"- {city}: {count}\n"
            
            await message.answer(
                stats_text,
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
                    ],
                    resize_keyboard=True
                )
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫.")
        await show_admin_menu(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def admin_stats(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        with get_session() as session:
            total_users = session.query(User).count()
            active_users = session.query(User).filter(User.is_active == True).count()
            total_requests = session.query(Request).count()
            total_distributions = session.query(Distribution).count()
            
            stats_text = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
                f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_requests}\n"
                f"üì® –í—Å–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {total_distributions}\n"
            )
            
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.set_state(AdminStates.STATS)
            
            await message.answer(stats_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await show_admin_menu(message, state)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def create_test_data(update: types.Message, state: FSMContext) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≥–æ—Ä–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    try:
        user = update.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not is_admin(user.id):
            await update.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        session = get_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_count = session.query(func.count(Category.id)).scalar()
        
        if categories_count == 0:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            test_categories = [
                {"name": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "description": "–£—Å–ª—É–≥–∏ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "is_active": True},
                {"name": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "description": "–£—Å–ª—É–≥–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∞", "is_active": True},
                {"name": "–ù–∞—Ç—è–∂–Ω—ã–µ –ø–æ—Ç–æ–ª–∫–∏", "description": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤", "is_active": True},
                {"name": "–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ–¥ –∫–ª—é—á", "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä", "is_active": True},
                {"name": "–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞", "description": "–£—Å–ª—É–≥–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞", "is_active": True}
            ]
            
            for cat_data in test_categories:
                category = Category(
                    name=cat_data["name"],
                    description=cat_data["description"],
                    is_active=cat_data["is_active"]
                )
                session.add(category)
            
            session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(test_categories)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ—Ä–æ–¥–∞
        cities_count = session.query(func.count(City.id)).scalar()
        
        if cities_count == 0:
            # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞
            test_cities = [
                {"name": "–ú–æ—Å–∫–≤–∞", "is_active": True, "phone_prefixes": ["495", "499"]},
                {"name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "is_active": True, "phone_prefixes": ["812"]},
                {"name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "is_active": True, "phone_prefixes": ["343"]},
                {"name": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "is_active": True, "phone_prefixes": ["383"]},
                {"name": "–ö–∞–∑–∞–Ω—å", "is_active": True, "phone_prefixes": ["843"]}
            ]
            
            for city_data in test_cities:
                city = City(
                    name=city_data["name"],
                    is_active=city_data["is_active"]
                )
                
                if "phone_prefixes" in city_data:
                    city.set_phone_prefixes(city_data["phone_prefixes"])
                
                session.add(city)
            
            session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(test_cities)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await update.answer(
            f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count == 0 and len(test_categories) or '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'}\n"
            f"–ì–æ—Ä–æ–¥–∞: {cities_count == 0 and len(test_cities) or '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        await state.set_state(AdminStates.MAIN_MENU)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_test_data: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(AdminStates.MAIN_MENU)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def register_admin_handlers(router: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    router.message.register(admin_command, Command("admin"))
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    router.message.register(exit_admin_panel, 
                           F.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_categories, 
                           F.text == "üîß –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_cities, 
                           F.text == "üèôÔ∏è –ì–æ—Ä–æ–¥–∞", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_demo_generation, 
                           F.text == "ü§ñ –î–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_stats, 
                           F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                           AdminStates.MAIN_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    router.message.register(admin_toggle_category, AdminStates.CATEGORIES)
    router.message.register(admin_save_category, AdminStates.ADD_CATEGORY)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
    router.message.register(admin_toggle_city, AdminStates.CITIES)
    router.message.register(admin_save_city, AdminStates.ADD_CITY)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    router.message.register(admin_generate_demo_request, AdminStates.DEMO_GENERATION)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    router.message.register(show_admin_menu, 
                           F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", 
                           AdminStates.STATS) 