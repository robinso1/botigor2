import logging
from typing import Dict, Any, List, Optional, Union, Callable
from datetime import datetime

from aiogram import types, Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from bot.database.setup import get_session
from bot.models import User, Category, City, Request, Distribution
from bot.services.user_service import UserService
from bot.services.request_service import RequestService
from bot.utils import encrypt_personal_data, decrypt_personal_data, mask_phone_number
from bot.utils.demo_utils import generate_demo_request
from config import ADMIN_IDS, DEFAULT_CATEGORIES, DEFAULT_CITIES
from bot.handlers.user_handlers import show_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    MAIN_MENU = State()
    USERS = State()
    CATEGORIES = State()
    ADD_CATEGORY = State()
    EDIT_CATEGORY = State()
    CITIES = State()
    ADD_CITY = State()
    EDIT_CITY = State()
    REQUESTS = State()
    VIEW_REQUEST = State()
    DISTRIBUTIONS = State()
    DEMO_GENERATION = State()
    STATS = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin_command(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await show_admin_menu(message, state)

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def show_admin_menu(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üîß –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="üèôÔ∏è –ì–æ—Ä–æ–¥–∞"), KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="ü§ñ –î–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è")],
            [KeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    await state.set_state(AdminStates.MAIN_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def exit_admin_panel(message: types.Message, state: FSMContext) -> None:
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await show_main_menu(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def admin_categories(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    with get_session() as session:
        categories = session.query(Category).all()
        
        keyboard = []
        for category in categories:
            status = "‚úÖ" if category.is_active else "‚ùå"
            keyboard.append([KeyboardButton(text=f"{status} {category.name}")])
        
        keyboard.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")])
        keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —É—Å–ª—É–≥:\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–Ω–∞, ‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.",
            reply_markup=reply_markup
        )
        
        await state.set_state(AdminStates.CATEGORIES)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def admin_add_category(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(AdminStates.ADD_CATEGORY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def admin_save_category(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await admin_categories(message, state)
        return
    
    category_name = message.text.strip()
    
    with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        existing_category = session.query(Category).filter(Category.name == category_name).first()
        
        if existing_category:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = Category(name=category_name, is_active=True)
            session.add(new_category)
            session.commit()
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await admin_categories(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def admin_toggle_category(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message, state)
        return
    
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await admin_add_category(message, state)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å)
    category_text = message.text
    if category_text.startswith("‚úÖ ") or category_text.startswith("‚ùå "):
        category_name = category_text[2:].strip()
        
        with get_session() as session:
            category = session.query(Category).filter(Category.name == category_name).first()
            
            if category:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                category.is_active = not category.is_active
                session.commit()
                
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if category.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' {status}.")
            else:
                await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await admin_categories(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –≥–æ—Ä–æ–¥–æ–≤
async def admin_cities(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    with get_session() as session:
        cities = session.query(City).all()
        
        keyboard = []
        for city in cities:
            status = "‚úÖ" if city.is_active else "‚ùå"
            keyboard.append([KeyboardButton(text=f"{status} {city.name}")])
        
        keyboard.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")])
        keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏:\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–µ–Ω, ‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.",
            reply_markup=reply_markup
        )
        
        await state.set_state(AdminStates.CITIES)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
async def admin_add_city(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(AdminStates.ADD_CITY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
async def admin_save_city(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await admin_cities(message, state)
        return
    
    city_name = message.text.strip()
    
    with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥
        existing_city = session.query(City).filter(City.name == city_name).first()
        
        if existing_city:
            await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
            new_city = City(name=city_name, is_active=True)
            session.add(new_city)
            session.commit()
            await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
        await admin_cities(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ä–æ–¥–∞
async def admin_toggle_city(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message, state)
        return
    
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
        await admin_add_city(message, state)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å)
    city_text = message.text
    if city_text.startswith("‚úÖ ") or city_text.startswith("‚ùå "):
        city_name = city_text[2:].strip()
        
        with get_session() as session:
            city = session.query(City).filter(City.name == city_name).first()
            
            if city:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                city.is_active = not city.is_active
                session.commit()
                
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if city.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' {status}.")
            else:
                await message.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        await admin_cities(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def admin_demo_generation(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∑–∞—è–≤–æ–∫.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=keyboard
    )
    
    await state.set_state(AdminStates.DEMO_GENERATION)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∑–∞—è–≤–∫–∏
async def admin_generate_demo_request(message: types.Message, state: FSMContext) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–∑–∞—è–≤–∫—É"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message, state)
        return
    
    try:
        request_id = generate_demo_request()
        await message.answer(f"–î–µ–º–æ-–∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. ID: {request_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∑–∞—è–≤–∫–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∑–∞—è–≤–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def admin_stats(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    with get_session() as session:
        total_users = session.query(User).count()
        active_users = session.query(User).filter(User.is_active == True).count()
        total_requests = session.query(Request).count()
        total_distributions = session.query(Distribution).count()
        
        stats_text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_requests}\n"
            f"üì® –í—Å–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {total_distributions}\n"
        )
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(stats_text, reply_markup=keyboard)
        await state.set_state(AdminStates.STATS)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def register_admin_handlers(router: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    router.message.register(admin_command, Command("admin"))
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    router.message.register(exit_admin_panel, 
                           F.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_categories, 
                           F.text == "üîß –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_cities, 
                           F.text == "üèôÔ∏è –ì–æ—Ä–æ–¥–∞", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_demo_generation, 
                           F.text == "ü§ñ –î–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", 
                           AdminStates.MAIN_MENU)
    router.message.register(admin_stats, 
                           F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                           AdminStates.MAIN_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    router.message.register(admin_toggle_category, AdminStates.CATEGORIES)
    router.message.register(admin_save_category, AdminStates.ADD_CATEGORY)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
    router.message.register(admin_toggle_city, AdminStates.CITIES)
    router.message.register(admin_save_city, AdminStates.ADD_CITY)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–º–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    router.message.register(admin_generate_demo_request, AdminStates.DEMO_GENERATION)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    router.message.register(show_admin_menu, 
                           F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", 
                           AdminStates.STATS) 