"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
"""
import logging
from typing import List, Dict, Any, Optional

from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.database.setup import get_session
from bot.models import User, Category, SubCategory
from bot.services.user_service import UserService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

class SubCategoryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    selecting_category = State()
    selecting_subcategory = State()
    entering_value = State()


async def get_subcategories_by_category(category_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    with get_session() as session:
        subcategories = session.query(SubCategory).filter(
            SubCategory.category_id == category_id,
            SubCategory.is_active == True
        ).all()
        
        result = []
        for subcategory in subcategories:
            result.append({
                "id": subcategory.id,
                "name": subcategory.name,
                "description": subcategory.description,
                "type": subcategory.type,
                "min_value": subcategory.min_value,
                "max_value": subcategory.max_value
            })
        
        return result


async def get_user_subcategories(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_session() as session:
        user_service = UserService(session)
        db_user = user_service.get_user_by_telegram_id(user_id)
        
        if not db_user:
            return []
        
        result = []
        for subcategory in db_user.subcategories:
            result.append({
                "id": subcategory.id,
                "name": subcategory.name,
                "category_id": subcategory.category_id,
                "category_name": subcategory.category.name if subcategory.category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "type": subcategory.type,
                "value": None  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è
            })
        
        return result


@router.message(F.text == "üîç –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def select_subcategories_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with get_session() as session:
        user_service = UserService(session)
        db_user = user_service.get_user_by_telegram_id(message.from_user.id)
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_categories = db_user.categories
        
        if not user_categories:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        for category in user_categories:
            keyboard.append([types.KeyboardButton(text=f"üìÇ {category.name}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å")])
        
        reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(SubCategoryStates.selecting_category)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:",
            reply_markup=reply_markup
        )


@router.message(SubCategoryStates.selecting_category, F.text.startswith("üìÇ "))
async def select_category(message: types.Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    category_name = message.text[2:].strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    with get_session() as session:
        category = session.query(Category).filter(
            Category.name == category_name,
            Category.is_active == True
        ).first()
        
        if not category:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = session.query(SubCategory).filter(
            SubCategory.category_id == category.id,
            SubCategory.is_active == True
        ).all()
        
        if not subcategories:
            await message.answer(
                f"–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_service = UserService(session)
        db_user = user_service.get_user_by_telegram_id(message.from_user.id)
        user_subcategory_ids = [sc.id for sc in db_user.subcategories]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_category_id=category.id, selected_category_name=category.name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        for subcategory in subcategories:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            status = "‚úÖ" if subcategory.id in user_subcategory_ids else "‚ùå"
            keyboard.append([types.KeyboardButton(text=f"{status} {subcategory.name}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–ù–∞–∑–∞–¥"
        keyboard.append([types.KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")])
        keyboard.append([types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
        
        reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(SubCategoryStates.selecting_subcategory)
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':\n\n"
            "‚ùå - –∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
            "‚úÖ - –∫—Ä–∏—Ç–µ—Ä–∏–π –≤—ã–±—Ä–∞–Ω\n\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã.\n"
            "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'.",
            reply_markup=reply_markup
        )


@router.message(SubCategoryStates.selecting_subcategory, F.text.startswith(("‚úÖ ", "‚ùå ")))
async def toggle_subcategory(message: types.Message, state: FSMContext):
    """–í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcategory_name = message.text[2:].strip()
    is_selected = message.text.startswith("‚úÖ ")
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {'–æ—Ç–º–µ–Ω–∏–ª' if is_selected else '–≤—ã–±—Ä–∞–ª'} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategory_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    category_id = state_data.get("selected_category_id")
    category_name = state_data.get("selected_category_name")
    
    if not category_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        subcategory = session.query(SubCategory).filter(
            SubCategory.name == subcategory_name,
            SubCategory.category_id == category_id,
            SubCategory.is_active == True
        ).first()
        
        if not subcategory:
            await message.answer(f"–ö—Ä–∏—Ç–µ—Ä–∏–π '{subcategory_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = UserService(session)
        db_user = user_service.get_user_by_telegram_id(message.from_user.id)
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if is_selected:
            # –£–¥–∞–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if subcategory in db_user.subcategories:
                db_user.subcategories.remove(subcategory)
                session.commit()
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if subcategory not in db_user.subcategories:
                db_user.subcategories.append(subcategory)
                session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = session.query(SubCategory).filter(
            SubCategory.category_id == category_id,
            SubCategory.is_active == True
        ).all()
        
        user_subcategory_ids = [sc.id for sc in db_user.subcategories]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        for sc in subcategories:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            status = "‚úÖ" if sc.id in user_subcategory_ids else "‚ùå"
            keyboard.append([types.KeyboardButton(text=f"{status} {sc.name}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–ù–∞–∑–∞–¥"
        keyboard.append([types.KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")])
        keyboard.append([types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
        
        reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        await message.answer(
            f"–ö—Ä–∏—Ç–µ—Ä–∏–π '{subcategory_name}' {'—É–¥–∞–ª–µ–Ω' if is_selected else '–¥–æ–±–∞–≤–ª–µ–Ω'}.",
            reply_markup=reply_markup
        )


@router.message(SubCategoryStates.selecting_subcategory, F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def subcategory_selection_done(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    category_name = state_data.get("selected_category_name", "–≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    keyboard = [
        [types.KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        reply_markup=reply_markup
    )


@router.message(SubCategoryStates.selecting_subcategory, F.text == "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def back_to_categories(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.update_data(selected_category_id=None, selected_category_name=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with get_session() as session:
        user_service = UserService(session)
        db_user = user_service.get_user_by_telegram_id(message.from_user.id)
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_categories = db_user.categories
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        for category in user_categories:
            keyboard.append([types.KeyboardButton(text=f"üìÇ {category.name}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å")])
        
        reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(SubCategoryStates.selecting_category)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:",
            reply_markup=reply_markup
        )


@router.message(SubCategoryStates.selecting_category, F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å")
async def back_to_profile(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = [
        [types.KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=reply_markup
    ) 