import logging
from typing import Dict, Any, List, Optional, Union, Callable
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from bot.models import get_session
from bot.services.user_service import UserService
from bot.services.request_service import RequestService
from config import ADMIN_IDS

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    PROFILE_MENU,
    SETTINGS_MENU,
    CATEGORY_SELECTION,
    CITY_SELECTION,
    PHONE_INPUT,
    REQUEST_MENU,
    REQUEST_STATUS_SELECTION,
) = range(8)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = user_service.get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –ò–≥–æ—Ä—å –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.\n\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
    
    return MAIN_MENU

async def profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = user_service.get_user_statistics(db_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"*–ò–º—è*: {db_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"*–§–∞–º–∏–ª–∏—è*: {db_user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {db_user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*: {', '.join([cat.name for cat in db_user.categories]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"*–ì–æ—Ä–æ–¥–∞*: {', '.join([city.name for city in db_user.cities]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n\n"
        f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {stats['total_distributions']}\n"
        f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {stats['status_stats'].get('–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ', 0)}\n"
        f"–ü—Ä–∏–Ω—è—Ç–æ: {stats['status_stats'].get('–ø—Ä–∏–Ω—è—Ç–æ', 0)}\n"
        f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['status_stats'].get('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 0)}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=profile_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return PROFILE_MENU

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_text = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.\n\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*: {', '.join([cat.name for cat in db_user.categories]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"*–ì–æ—Ä–æ–¥–∞*: {', '.join([city.name for city in db_user.cities]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="select_categories")],
        [InlineKeyboardButton("üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞", callback_data="select_cities")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=settings_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SETTINGS_MENU

async def select_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from bot.models import Category
    categories = session.query(Category).filter(Category.is_active == True).all()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category in categories:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        is_selected = category in db_user.categories
        button_text = f"{'‚úÖ' if is_selected else '‚ùå'} {category.name}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"category_{category.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="categories_done")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:",
        reply_markup=reply_markup
    )
    
    return CATEGORY_SELECTION

async def toggle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = int(update.callback_query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    from bot.models import Category
    category = session.query(Category).filter(Category.id == category_id).first()
    
    if category:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if category in db_user.categories:
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            db_user.categories.remove(category)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            db_user.categories.append(category)
        
        session.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    return await select_categories(update, context)

async def select_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    from bot.models import City
    cities = session.query(City).filter(City.is_active == True).all()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    keyboard = []
    for city in cities:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        is_selected = city in db_user.cities
        button_text = f"{'‚úÖ' if is_selected else '‚ùå'} {city.name}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"city_{city.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="cities_done")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏:",
        reply_markup=reply_markup
    )
    
    return CITY_SELECTION

async def toggle_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(update.callback_query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
    from bot.models import City
    city = session.query(City).filter(City.id == city_id).first()
    
    if city:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if city in db_user.cities:
            # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            db_user.cities.remove(city)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            db_user.cities.append(city)
        
        session.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤
    return await select_cities(update, context)

async def edit_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_profile")]
        ])
    )
    
    return PHONE_INPUT

async def save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    phone = update.message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user_service.update_user(db_user.id, {"phone": phone})
    
    await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    return await profile_menu(update, context)

async def my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from bot.models import Distribution
    distributions = session.query(Distribution).filter(
        Distribution.user_id == db_user.id
    ).order_by(Distribution.created_at.desc()).limit(10).all()
    
    if not distributions:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞—è–≤–æ–∫
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
        return MAIN_MENU
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞—è–≤–∫–∞–º–∏
    keyboard = []
    for dist in distributions:
        request = dist.request
        status_emoji = {
            "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "üì©",
            "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ": "üëÅÔ∏è",
            "–ø—Ä–∏–Ω—è—Ç–æ": "‚úÖ",
            "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ": "‚ùå"
        }.get(dist.status, "üì©")
        
        button_text = f"{status_emoji} {request.client_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} - {request.status}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"request_{dist.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–í–∞—à–∏ –∑–∞—è–≤–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):",
        reply_markup=reply_markup
    )
    
    return REQUEST_MENU

async def show_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
    distribution_id = int(update.callback_query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    from bot.models import Distribution
    distribution = session.query(Distribution).filter(Distribution.id == distribution_id).first()
    
    if not distribution:
        await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return await my_requests(update, context)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", –µ—Å–ª–∏ –æ–Ω –±—ã–ª "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    if distribution.status == "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ":
        distribution.status = "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
        session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    request = distribution.request
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    request_text = (
        f"üìã *–ó–∞—è–≤–∫–∞ #{request.id}*\n\n"
        f"*–ö–ª–∏–µ–Ω—Ç*: {request.client_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {request.client_phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è*: {request.category.name if request.category else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"*–ì–æ—Ä–æ–¥*: {request.city.name if request.city else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"*–ê–¥—Ä–µ—Å*: {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"*–ü–ª–æ—â–∞–¥—å*: {request.area or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –º¬≤\n"
        f"*–°—Ç–∞—Ç—É—Å*: {request.status}\n\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ*:\n{request.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è*: {request.created_at.strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{distribution_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{distribution_id}")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_requests")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=request_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return REQUEST_MENU

async def accept_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
    distribution_id = int(update.callback_query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    from bot.models import Distribution
    distribution = session.query(Distribution).filter(Distribution.id == distribution_id).first()
    
    if not distribution:
        await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return await my_requests(update, context)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ "–ø—Ä–∏–Ω—è—Ç–æ"
    distribution.status = "–ø—Ä–∏–Ω—è—Ç–æ"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ"
    distribution.request.status = "–≤ —Ä–∞–±–æ—Ç–µ"
    
    session.commit()
    
    await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    return await my_requests(update, context)

async def reject_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
    distribution_id = int(update.callback_query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    from bot.models import Distribution
    distribution = session.query(Distribution).filter(Distribution.id == distribution_id).first()
    
    if not distribution:
        await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return await my_requests(update, context)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    distribution.status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    session.commit()
    
    await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    return await my_requests(update, context)

def get_user_conversation_handler() -> ConversationHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    return ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(profile_menu, pattern="^profile$"),
                CallbackQueryHandler(settings_menu, pattern="^settings$"),
                CallbackQueryHandler(my_requests, pattern="^my_requests$"),
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
            ],
            PROFILE_MENU: [
                CallbackQueryHandler(edit_phone, pattern="^edit_phone$"),
                CallbackQueryHandler(show_main_menu, pattern="^back_to_main$"),
            ],
            SETTINGS_MENU: [
                CallbackQueryHandler(select_categories, pattern="^select_categories$"),
                CallbackQueryHandler(select_cities, pattern="^select_cities$"),
                CallbackQueryHandler(show_main_menu, pattern="^back_to_main$"),
            ],
            CATEGORY_SELECTION: [
                CallbackQueryHandler(toggle_category, pattern="^category_\d+$"),
                CallbackQueryHandler(settings_menu, pattern="^categories_done$"),
            ],
            CITY_SELECTION: [
                CallbackQueryHandler(toggle_city, pattern="^city_\d+$"),
                CallbackQueryHandler(settings_menu, pattern="^cities_done$"),
            ],
            PHONE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_phone),
                CallbackQueryHandler(profile_menu, pattern="^back_to_profile$"),
            ],
            REQUEST_MENU: [
                CallbackQueryHandler(show_request, pattern="^request_\d+$"),
                CallbackQueryHandler(accept_request, pattern="^accept_\d+$"),
                CallbackQueryHandler(reject_request, pattern="^reject_\d+$"),
                CallbackQueryHandler(my_requests, pattern="^back_to_requests$"),
                CallbackQueryHandler(show_main_menu, pattern="^back_to_main$"),
            ],
        },
        fallbacks=[CommandHandler("start", start_command)],
    ) 