import logging
from typing import Dict, Any, List, Optional, Union, Callable
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from bot.models import get_session
from bot.services.user_service import UserService
from bot.services.request_service import RequestService
from config import ADMIN_IDS

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    PROFILE_MENU,
    SETTINGS_MENU,
    CATEGORY_SELECTION,
    CITY_SELECTION,
    PHONE_INPUT,
    REQUEST_MENU,
    REQUEST_STATUS_SELECTION,
) = range(8)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        user = update.effective_user
        session = get_session()
        
        logger.info("–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä UserService")
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user.id}")
        db_user = user_service.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω/—Å–æ–∑–¥–∞–Ω: {db_user.id}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∑–∞—è–≤–æ–∫.\n\n"
            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∫–∞–∑—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        return await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        logger.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_main_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
        keyboard = [
            ["üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"],
            ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if user.id in ADMIN_IDS:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            keyboard.append(["üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        if update.callback_query:
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query")
            update.callback_query.answer()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:",
                reply_markup=reply_markup
            )
        else:
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é")
            await update.message.reply_text(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:",
                reply_markup=reply_markup
            )
        
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_main_menu: {str(e)}", exc_info=True)
        try:
            if update.callback_query:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
                )
            else:
                await update.message.reply_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
                )
        except Exception:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ", exc_info=True)
        return MAIN_MENU

async def profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = user_service.get_user_statistics(db_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"*–ò–º—è*: {db_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"*–§–∞–º–∏–ª–∏—è*: {db_user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {db_user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*: {', '.join([cat.name for cat in db_user.categories]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"*–ì–æ—Ä–æ–¥–∞*: {', '.join([city.name for city in db_user.cities]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n\n"
        f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {stats['total_distributions']}\n"
        f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {stats['status_stats'].get('–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ', 0)}\n"
        f"–ü—Ä–∏–Ω—è—Ç–æ: {stats['status_stats'].get('–ø—Ä–∏–Ω—è—Ç–æ', 0)}\n"
        f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['status_stats'].get('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 0)}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    inline_keyboard = [
        [InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    inline_markup = InlineKeyboardMarkup(inline_keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è reply –∫–Ω–æ–ø–æ–∫
    reply_keyboard = [
        ["üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"],
        ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    
    if update.callback_query:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_query –Ω–µ None –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º answer()
        update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=profile_text,
            reply_markup=inline_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=profile_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return PROFILE_MENU

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_text = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*: {', '.join([cat.name for cat in db_user.categories]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"*–ì–æ—Ä–æ–¥–∞*: {', '.join([city.name for city in db_user.cities]) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {db_user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    inline_keyboard = [
        [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="select_categories")],
        [InlineKeyboardButton("üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞", callback_data="select_cities")],
        [InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    inline_markup = InlineKeyboardMarkup(inline_keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è reply –∫–Ω–æ–ø–æ–∫
    reply_keyboard = [
        ["üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞"],
        ["üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"],
        ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    
    if update.callback_query:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_query –Ω–µ None –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º answer()
        update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=settings_text,
            reply_markup=inline_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=settings_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return SETTINGS_MENU

async def select_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from bot.models import Category
    categories = session.query(Category).filter(Category.is_active == True).all()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category in categories:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        is_selected = category in db_user.categories
        button_text = f"{'‚úÖ' if is_selected else '‚ùå'} {category.name}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"toggle_category_{category.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="back_to_settings")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è reply –∫–Ω–æ–ø–æ–∫
    reply_keyboard = [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup_keyboard = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:",
            reply_markup=reply_markup
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup_keyboard
        )
    
    return CATEGORY_SELECTION

async def toggle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = int(update.callback_query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    from bot.models import Category
    category = session.query(Category).filter(Category.id == category_id).first()
    
    if category:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if category in db_user.categories:
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            db_user.categories.remove(category)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            db_user.categories.append(category)
        
        session.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    return await select_categories(update, context)

async def select_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    from bot.models import City
    cities = session.query(City).filter(City.is_active == True).all()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    keyboard = []
    for city in cities:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        is_selected = city in db_user.cities
        button_text = f"{'‚úÖ' if is_selected else '‚ùå'} {city.name}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"toggle_city_{city.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="back_to_settings")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è reply –∫–Ω–æ–ø–æ–∫
    reply_keyboard = [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup_keyboard = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏:",
            reply_markup=reply_markup
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup_keyboard
        )
    
    return CITY_SELECTION

async def toggle_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    session = get_session()
    user_service = UserService(session)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(update.callback_query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
    from bot.models import City
    city = session.query(City).filter(City.id == city_id).first()
    
    if city:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if city in db_user.cities:
            # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            db_user.cities.remove(city)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            db_user.cities.append(city)
        
        session.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤
    return await select_cities(update, context)

async def edit_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è reply –∫–Ω–æ–ø–æ–∫
    reply_keyboard = [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
            reply_markup=reply_markup
        )
    
    return PHONE_INPUT

async def save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user = update.effective_user
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_user = user_service.get_user_by_telegram_id(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    phone = update.message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user_service.update_user(db_user.id, {"phone": phone})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await update.message.reply_text(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    return await profile_menu(update, context)

async def my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    session = get_session()
    request_service = RequestService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    distributions = request_service.get_user_distributions(user.id)
    
    if not distributions:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            update.callback_query.answer()
            await update.callback_query.edit_message_text(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
                reply_markup=ReplyKeyboardMarkup([["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
            )
        
        return REQUEST_MENU
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    text = "üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏*:\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    for dist in distributions:
        request = dist.request
        status_emoji = {
            "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "üì§",
            "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ": "üëÅÔ∏è",
            "–ø—Ä–∏–Ω—è—Ç–æ": "‚úÖ",
            "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ": "‚ùå",
            "–∑–∞–≤–µ—Ä—à–µ–Ω–æ": "üèÅ",
            "–æ—Ç–º–µ–Ω–µ–Ω–æ": "üö´"
        }.get(dist.status, "‚ùì")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        text += f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{request.id}*\n"
        text += f"–°—Ç–∞—Ç—É—Å: {dist.status}\n"
        if request.client_name:
            text += f"–ö–ª–∏–µ–Ω—Ç: {request.client_name}\n"
        if request.category:
            text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category.name}\n"
        if request.city:
            text += f"–ì–æ—Ä–æ–¥: {request.city.name}\n"
        text += f"–î–∞—Ç–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏
        keyboard.append([InlineKeyboardButton(
            f"–ó–∞—è–≤–∫–∞ #{request.id} ({dist.status})",
            callback_data=f"request_{dist.id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        # –ò –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup([["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
    
    return REQUEST_MENU

async def show_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    session = get_session()
    request_service = RequestService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
    distribution_id = int(update.callback_query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    distribution = request_service.get_distribution(distribution_id)
    
    if not distribution:
        update.callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return await my_requests(update, context)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", –µ—Å–ª–∏ –æ–Ω "–Ω–æ–≤–∞—è"
    if distribution.status == "–Ω–æ–≤–∞—è":
        request_service.update_distribution_status(distribution_id, "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ")
        distribution.status = "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    request = distribution.request
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
    request_text = (
        f"üìã *–ó–∞—è–≤–∫–∞ #{request.id}*\n\n"
        f"*–ö–ª–∏–µ–Ω—Ç*: {request.client_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {request.client_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è*: {request.category.name if request.category else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"*–ì–æ—Ä–æ–¥*: {request.city.name if request.city else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"*–ü–ª–æ—â–∞–¥—å*: {request.area or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º¬≤\n"
        f"*–ê–¥—Ä–µ—Å*: {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ*:\n{request.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"*–°—Ç–∞—Ç—É—Å*: {distribution.status}\n"
        f"*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è*: {request.created_at.strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if distribution.status in ["–Ω–æ–≤–∞—è", "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"]:
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_request_{distribution_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_request_{distribution_id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_requests")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=request_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return REQUEST_MENU

async def accept_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É"""
    session = get_session()
    request_service = RequestService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
    distribution_id = int(update.callback_query.data.split("_")[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ "–ø—Ä–∏–Ω—è—Ç–æ"
    request_service.update_distribution_status(distribution_id, "–ø—Ä–∏–Ω—è—Ç–æ")
    
    await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    return await my_requests(update, context)

async def reject_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É"""
    session = get_session()
    request_service = RequestService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
    distribution_id = int(update.callback_query.data.split("_")[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    request_service.update_distribution_status(distribution_id, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
    await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    return await my_requests(update, context)

async def show_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin"""
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    return MAIN_MENU

def get_user_conversation_handler() -> ConversationHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex('^üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏$'), my_requests),
                MessageHandler(filters.Regex('^üë§ –ü—Ä–æ—Ñ–∏–ª—å$'), profile_menu),
                MessageHandler(filters.Regex('^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$'), settings_menu),
                MessageHandler(filters.Regex('^üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), show_admin_message),
                CallbackQueryHandler(my_requests, pattern='^my_requests$'),
                CallbackQueryHandler(profile_menu, pattern='^profile$'),
                CallbackQueryHandler(settings_menu, pattern='^settings$'),
                CallbackQueryHandler(lambda u, c: u.callback_query.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"), pattern='^admin$'),
            ],
            PROFILE_MENU: [
                MessageHandler(filters.Regex('^üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω$'), edit_phone),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu),
                CallbackQueryHandler(edit_phone, pattern='^edit_phone$'),
                CallbackQueryHandler(show_main_menu, pattern='^back_to_main$'),
            ],
            SETTINGS_MENU: [
                MessageHandler(filters.Regex('^üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏$'), select_categories),
                MessageHandler(filters.Regex('^üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞$'), select_cities),
                MessageHandler(filters.Regex('^üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω$'), edit_phone),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu),
                CallbackQueryHandler(select_categories, pattern='^select_categories$'),
                CallbackQueryHandler(select_cities, pattern='^select_cities$'),
                CallbackQueryHandler(edit_phone, pattern='^edit_phone$'),
                CallbackQueryHandler(show_main_menu, pattern='^back_to_main$'),
            ],
            CATEGORY_SELECTION: [
                CallbackQueryHandler(toggle_category, pattern='^toggle_category_'),
                CallbackQueryHandler(settings_menu, pattern='^back_to_settings$'),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu),
            ],
            CITY_SELECTION: [
                CallbackQueryHandler(toggle_city, pattern='^toggle_city_'),
                CallbackQueryHandler(settings_menu, pattern='^back_to_settings$'),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu),
            ],
            PHONE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), save_phone),
                CallbackQueryHandler(settings_menu, pattern='^back_to_settings$'),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu),
            ],
            REQUEST_MENU: [
                CallbackQueryHandler(show_request, pattern='^request_'),
                CallbackQueryHandler(my_requests, pattern='^back_to_requests$'),
                CallbackQueryHandler(show_main_menu, pattern='^back_to_main$'),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu),
            ],
            REQUEST_STATUS_SELECTION: [
                CallbackQueryHandler(accept_request, pattern='^accept_request_'),
                CallbackQueryHandler(reject_request, pattern='^reject_request_'),
                CallbackQueryHandler(my_requests, pattern='^back_to_requests$'),
                CallbackQueryHandler(show_main_menu, pattern='^back_to_main$'),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu),
            ],
        },
        fallbacks=[CommandHandler('start', start_command)],
        name="user_conversation",
        persistent=False
    )

def user_conversation_handler() -> ConversationHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return get_user_conversation_handler() 