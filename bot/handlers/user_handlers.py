import logging
from typing import Dict, Any, List, Optional, Union, Callable
from aiogram import types, Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
# from telegram.ext import ConversationHandler
from sqlalchemy import and_
from sqlalchemy.ext.asyncio import AsyncSession

from bot.models import User, Category, City, Request, Distribution, RequestStatus, DistributionStatus
from bot.services.user_service import UserService
from bot.services.request_service import RequestService
from bot.utils import encrypt_personal_data, decrypt_personal_data, mask_phone_number
from config import ADMIN_IDS
from bot.database.setup import get_session

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    MAIN_MENU = State()
    PROFILE_MENU = State()
    SETTINGS_MENU = State()
    CATEGORY_SELECTION = State()
    CITY_SELECTION = State()
    PHONE_INPUT = State()
    REQUEST_MENU = State()
    REQUEST_STATUS_SELECTION = State()
    SELECTING_CATEGORIES = State()
    SELECTING_CITIES = State()
    EDIT_PHONE = State()
    MY_REQUESTS = State()
    REQUEST_DETAILS = State()

async def start_command(update: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.from_user
        session = get_session()
        user_service = UserService(session)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = user_service.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏, "
            "–≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç–µ\n"
            "3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
            "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
            "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        await update.reply(
            welcome_text,
            reply_markup=reply_markup
        )
        
        await state.set_state(UserStates.MAIN_MENU)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await update.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()

async def show_main_menu(update: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –¢–µ–∫—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        menu_text = (
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:\n"
            "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤\n"
            "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —ç—Ç–æ –º–µ–Ω—é"
        )
        
        await update.answer(
            menu_text,
            reply_markup=reply_markup
        )
        
        await state.set_state(UserStates.MAIN_MENU)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()

async def profile_menu(update: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = update.from_user
        session = get_session()
        user_service = UserService(session)
        
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_text = f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        profile_text += f"*–ò–º—è*: {db_user.name}\n"
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏ –º–∞—Å–∫–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
        if db_user.phone:
            try:
                decrypted_phone = decrypt_personal_data(db_user.phone)
                phone = mask_phone_number(decrypted_phone)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
                phone = "–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"
        
        profile_text += f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {phone}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = user_service.get_user_categories(db_user.id)
        if categories:
            profile_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*:\n"
            for category in categories:
                profile_text += f"- {category.name}\n"
        else:
            profile_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*: –ù–µ –≤—ã–±—Ä–∞–Ω—ã\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        cities = user_service.get_user_cities(db_user.id)
        if cities:
            profile_text += "\n*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞*:\n"
            for city in cities:
                profile_text += f"- {city.name}\n"
        else:
            profile_text += "\n*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞*: –ù–µ –≤—ã–±—Ä–∞–Ω—ã\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton(text="üîß –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"), KeyboardButton(text="üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞")],
            [KeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.answer(
            profile_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        await state.set_state(UserStates.PROFILE_MENU)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_menu: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def settings_menu(update: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
            ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n"
            "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö\n"
        )
        
        await update.answer(
            settings_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        await state.set_state(UserStates.SETTINGS_MENU)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_menu: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def select_categories(update: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        user = update.from_user
        session = get_session()
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = session.query(Category).filter(Category.is_active == True).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_categories = db_user.categories
        user_category_ids = [c.id for c in user_categories]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        for category in categories:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            status = "‚úÖ" if category.id in user_category_ids else "‚ùå"
            keyboard.append([f"{status} {category.name}"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
        keyboard.append(["‚úÖ –ì–æ—Ç–æ–≤–æ"])
        keyboard.append(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        message_text = (
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ:\n\n"
            "‚ùå - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n"
            "‚úÖ - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞\n\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã.\n"
            "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'."
        )
        
        await update.answer(
            message_text,
            reply_markup=reply_markup
        )
        
        await state.set_state(UserStates.SELECTING_CATEGORIES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_categories: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def toggle_category(update: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user = update.from_user
        session = get_session()
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = update.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
        if message_text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            await update.answer(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
            )
            await state.set_state(UserStates.PROFILE_MENU)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if message_text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if message_text.startswith("‚úÖ ") or message_text.startswith("‚ùå "):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_name = message_text[2:]  # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î
            category = session.query(Category).filter(
                and_(
                    Category.name == category_name,
                    Category.is_active == True
                )
            ).first()
            
            if not category:
                await update.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.set_state(UserStates.SELECTING_CATEGORIES)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            is_selected = category in db_user.categories
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if is_selected:
                db_user.categories.remove(category)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–¥–∞–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.name}")
            else:
                db_user.categories.append(category)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.name}")
            
            session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await state.set_state(UserStates.SELECTING_CATEGORIES)
            return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        await update.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
        )
        await state.set_state(UserStates.SELECTING_CATEGORIES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_category: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def select_cities(update: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        user = update.from_user
        session = get_session()
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
        cities = session.query(City).filter(City.is_active == True).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cities = db_user.cities
        user_city_ids = [c.id for c in user_cities]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
        keyboard = []
        for city in cities:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            status = "‚úÖ" if city.id in user_city_ids else "‚ùå"
            keyboard.append([f"{status} {city.name}"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
        keyboard.append(["‚úÖ –ì–æ—Ç–æ–≤–æ"])
        keyboard.append(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        message_text = (
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:\n\n"
            "‚ùå - –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
            "‚úÖ - –≥–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω\n\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã.\n"
            "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'."
        )
        
        await update.answer(
            message_text,
            reply_markup=reply_markup
        )
        
        await state.set_state(UserStates.SELECTING_CITIES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_cities: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def toggle_city(update: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    try:
        user = update.from_user
        session = get_session()
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = update.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
        if message_text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            await update.answer(
                "–ì–æ—Ä–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤."
            )
            await state.set_state(UserStates.PROFILE_MENU)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if message_text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
        if message_text.startswith("‚úÖ ") or message_text.startswith("‚ùå "):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            city_name = message_text[2:]  # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä
            
            # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ä–æ–¥ –≤ –ë–î
            city = session.query(City).filter(
                and_(
                    City.name == city_name,
                    City.is_active == True
                )
            ).first()
            
            if not city:
                await update.answer(f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.set_state(UserStates.SELECTING_CITIES)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥
            is_selected = city in db_user.cities
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
            if is_selected:
                db_user.cities.remove(city)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–¥–∞–ª–∏–ª –≥–æ—Ä–æ–¥ {city.name}")
            else:
                db_user.cities.append(city)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–∏–ª –≥–æ—Ä–æ–¥ {city.name}")
            
            session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await state.set_state(UserStates.SELECTING_CITIES)
            return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        await update.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
        )
        await state.set_state(UserStates.SELECTING_CITIES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_city: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def edit_phone(update: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        keyboard = [
            ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        message_text = (
            "üì± *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+7XXXXXXXXXX\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +79991234567\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        await update.answer(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        await state.set_state(UserStates.EDIT_PHONE)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_phone: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def save_phone(update: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = update.from_user
        phone = update.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if phone == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not phone.startswith("+") or not phone[1:].isdigit() or len(phone) < 10:
            await update.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX."
            )
            await state.set_state(UserStates.EDIT_PHONE)
            return
        
        session = get_session()
        user_service = UserService(session)
        
        # –®–∏—Ñ—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        encrypted_phone = encrypt_personal_data(phone)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = user_service.update_user_phone(user.id, encrypted_phone)
        
        if not db_user:
            await update.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.set_state(UserStates.MAIN_MENU)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await update.answer(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {mask_phone_number(phone)}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        await state.set_state(UserStates.PROFILE_MENU)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_phone: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def my_requests(update: types.Message, state: FSMContext, filter_type: str = "all") -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = update.from_user
        session = get_session()
        request_service = RequestService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        distributions = request_service.get_user_distributions(user.id)
        
        if not distributions:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [
                ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–∞–º.",
                reply_markup=reply_markup
            )
            await state.set_state(UserStates.MY_REQUESTS)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        filtered_distributions = []
        if filter_type == "new":
            filtered_distributions = [d for d in distributions if d.status == "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"]
        elif filter_type == "accepted":
            filtered_distributions = [d for d in distributions if d.status == "–ø—Ä–∏–Ω—è—Ç–æ"]
        elif filter_type == "rejected":
            filtered_distributions = [d for d in distributions if d.status == "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"]
        else:  # all
            filtered_distributions = distributions
        
        if not filtered_distributions:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [
                ["üìã –í—Å–µ –∑–∞—è–≤–∫–∏", "üÜï –ù–æ–≤—ã–µ"],
                ["‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ", "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"],
                ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.answer(
                f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º ({filter_type}).",
                reply_markup=reply_markup
            )
            await state.set_state(UserStates.MY_REQUESTS)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            ["üìã –í—Å–µ –∑–∞—è–≤–∫–∏", "üÜï –ù–æ–≤—ã–µ"],
            ["‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ", "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"],
            ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
        inline_keyboard = []
        for dist in filtered_distributions[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∑–∞—è–≤–∫–∞–º–∏
            request = dist.request
            status_emoji = "üÜï" if dist.status == "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" else "‚úÖ" if dist.status == "–ø—Ä–∏–Ω—è—Ç–æ" else "‚ùå"
            category_name = request.category.name if request.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            button_text = f"{status_emoji} {category_name} - {request.client_name}"
            inline_keyboard.append([InlineKeyboardButton(button_text, callback_data=f"show_request_{dist.id}")])
        
        inline_markup = InlineKeyboardMarkup(inline_keyboard)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        title = "–í—Å–µ –∑–∞—è–≤–∫–∏"
        if filter_type == "new":
            title = "–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"
        elif filter_type == "accepted":
            title = "–ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏"
        elif filter_type == "rejected":
            title = "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
        
        await update.answer(
            f"{title} ({len(filtered_distributions)}):\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=reply_markup
        )
        
        await update.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:",
            reply_markup=inline_markup
        )
        
        await state.set_state(UserStates.MY_REQUESTS)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_requests: {e}")
        await update.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(UserStates.MAIN_MENU)

async def show_request(update: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
        callback_query = update.query
        callback_query.answer()
        
        distribution_id = int(callback_query.data.split("_")[-1])
        
        session = get_session()
        request_service = RequestService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        distribution = request_service.get_distribution(distribution_id)
        if not distribution:
            await callback_query.message.answer(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
            )
            await state.set_state(UserStates.MY_REQUESTS)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = distribution.request
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏ –º–∞—Å–∫–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
        if request.phone:
            try:
                decrypted_phone = decrypt_personal_data(request.phone)
                phone = mask_phone_number(decrypted_phone)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
                phone = "–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
        text = f"üìã *–ó–∞—è–≤–∫–∞ #{request.id}*\n\n"
        text += f"üîß *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {request.category.name}\n"
        text += f"üèôÔ∏è *–ì–æ—Ä–æ–¥:* {request.city.name}\n"
        text += f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {request.name}\n"
        text += f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{request.description}\n\n"
        text += f"üìä *–°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:* {distribution.status}\n"
        text += f"üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if distribution.status == DistributionStatus.NEW.value:
            keyboard.append([
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_request_{distribution_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_request_{distribution_id}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_requests")])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ø—Ä–∏–Ω—è—Ç–æ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        if distribution.status == DistributionStatus.ACCEPTED.value:
            try:
                full_phone = decrypt_personal_data(request.phone)
                text += f"\n*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω*: {full_phone}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
                text += "\n*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω*: –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        await state.set_state(UserStates.REQUEST_DETAILS)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_request: {e}")
        if update.query:
            await update.query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        await state.set_state(UserStates.MY_REQUESTS)

async def accept_request(update: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
        callback_query = update.query
        callback_query.answer()
        
        distribution_id = int(callback_query.data.split("_")[2])
        
        session = get_session()
        request_service = RequestService(session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        distribution = request_service.update_distribution_status(distribution_id, "–ø—Ä–∏–Ω—è—Ç–æ")
        if not distribution:
            await callback_query.message.answer(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
            )
            await state.set_state(UserStates.MY_REQUESTS)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
        await callback_query.message.answer(
            "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
        await my_requests(update, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ accept_request: {e}")
        if update.query:
            await update.query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        await state.set_state(UserStates.MY_REQUESTS)

async def reject_request(update: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ callback_data
        callback_query = update.query
        callback_query.answer()
        
        distribution_id = int(callback_query.data.split("_")[2])
        
        session = get_session()
        request_service = RequestService(session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        distribution = request_service.update_distribution_status(distribution_id, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        if not distribution:
            await callback_query.message.answer(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
            )
            await state.set_state(UserStates.MY_REQUESTS)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        await callback_query.message.answer(
            "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É. –û–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
        await my_requests(update, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_request: {e}")
        if update.query:
            await update.query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        await state.set_state(UserStates.MY_REQUESTS)

async def show_admin_message(update: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin"""
    await update.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    await state.set_state(UserStates.MAIN_MENU)

# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ python-telegram-bot
# def get_user_conversation_handler() -> ConversationHandler:
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     return ConversationHandler(
#         entry_points=[
#             CommandHandler("start", start_command),
#             MessageHandler(filters.Regex(r"^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), show_main_menu),
#         ],
#         states={
#             UserStates.MAIN_MENU: [
#                 MessageHandler(filters.Regex(r"^üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$"), profile_menu),
#                 MessageHandler(filters.Regex(r"^üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏$"), my_requests),
#                 MessageHandler(filters.Regex(r"^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), settings_menu),
#                 MessageHandler(filters.Regex(r"^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), show_main_menu),
#             ],
#             UserStates.PROFILE_MENU: [
#                 MessageHandler(filters.Regex(r"^üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞$"), select_cities),
#                 MessageHandler(filters.Regex(r"^üîß –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏$"), select_categories),
#                 MessageHandler(filters.Regex(r"^üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω$"), edit_phone),
#                 MessageHandler(filters.Regex(r"^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), show_main_menu),
#             ],
#             UserStates.SELECTING_CATEGORIES: [
#                 MessageHandler(filters.TEXT & ~filters.COMMAND, toggle_category),
#             ],
#             UserStates.SELECTING_CITIES: [
#                 MessageHandler(filters.TEXT & ~filters.COMMAND, toggle_city),
#             ],
#             UserStates.EDIT_PHONE: [
#                 MessageHandler(filters.TEXT & ~filters.COMMAND, save_phone),
#             ],
#             UserStates.SETTINGS_MENU: [
#                 MessageHandler(filters.Regex(r"^üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$"), lambda u, c: u.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")),
#                 MessageHandler(filters.Regex(r"^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), show_main_menu),
#             ],
#             UserStates.MY_REQUESTS: [
#                 MessageHandler(filters.Regex(r"^üìã –í—Å–µ –∑–∞—è–≤–∫–∏$"), lambda u, c: my_requests(u, c, filter_type="all")),
#                 MessageHandler(filters.Regex(r"^üÜï –ù–æ–≤—ã–µ$"), lambda u, c: my_requests(u, c, filter_type="new")),
#                 MessageHandler(filters.Regex(r"^‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ$"), lambda u, c: my_requests(u, c, filter_type="accepted")),
#                 MessageHandler(filters.Regex(r"^‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ$"), lambda u, c: my_requests(u, c, filter_type="rejected")),
#                 MessageHandler(filters.Regex(r"^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), show_main_menu),
#                 CallbackQueryHandler(show_request, pattern=r"^show_request_\d+$"),
#             ],
#             UserStates.REQUEST_DETAILS: [
#                 CallbackQueryHandler(accept_request, pattern=r"^accept_request_\d+$"),
#                 CallbackQueryHandler(reject_request, pattern=r"^reject_request_\d+$"),
#                 CallbackQueryHandler(lambda u, c: my_requests(u, c), pattern=r"^back_to_requests$"),
#             ],
#         },
#         fallbacks=[
#             CommandHandler("start", start_command),
#             MessageHandler(filters.Regex(r"^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), show_main_menu),
#         ],
#         name="user_conversation",
#         persistent=False,
#     )

# def user_conversation_handler() -> ConversationHandler:
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
#     return get_user_conversation_handler() 