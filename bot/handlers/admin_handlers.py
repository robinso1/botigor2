import logging
from typing import Dict, Any, List, Optional, Union
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from bot.models import get_session, User, Category, City, Request, Distribution
from bot.services.user_service import UserService
from bot.services.request_service import RequestService
from bot.utils.demo_utils import generate_demo_request
from config import ADMIN_IDS, DEFAULT_CATEGORIES, DEFAULT_CITIES

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    ADMIN_MAIN,
    ADMIN_STATS,
    ADMIN_USERS,
    ADMIN_CATEGORIES,
    ADMIN_CITIES,
    ADMIN_REQUESTS,
    ADMIN_ADD_CATEGORY,
    ADMIN_ADD_CITY,
    ADMIN_ADD_REQUEST,
    ADMIN_REQUEST_DETAILS,
    ADMIN_EDIT_REQUEST,
    ADMIN_EDIT_REQUEST_STATUS,
    ADMIN_EDIT_REQUEST_CATEGORY,
    ADMIN_EDIT_REQUEST_CITY,
    ADMIN_EDIT_REQUEST_CLIENT_NAME,
    ADMIN_EDIT_REQUEST_CLIENT_PHONE,
    ADMIN_EDIT_REQUEST_DESCRIPTION,
    ADMIN_EDIT_REQUEST_AREA,
    ADMIN_EDIT_REQUEST_ADDRESS,
) = range(19)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id not in ADMIN_IDS:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return -1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_categories")],
        [InlineKeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥–∞", callback_data="admin_cities")],
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_requests")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_add_request")],
        [InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É", callback_data="admin_create_demo")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=reply_markup
    )
    
    return ADMIN_MAIN

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    session = get_session()
    request_service = RequestService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = request_service.get_request_statistics()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"*–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫*: {stats['total_requests']}\n\n"
        f"*–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º*:\n"
    )
    
    for status, count in stats['status_stats'].items():
        stats_text += f"- {status}: {count}\n"
    
    stats_text += f"\n*–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*:\n"
    
    for category, count in stats['category_stats'].items():
        stats_text += f"- {category}: {count}\n"
    
    stats_text += f"\n*–ü–æ –≥–æ—Ä–æ–¥–∞–º*:\n"
    
    for city, count in stats['city_stats'].items():
        stats_text += f"- {city}: {count}\n"
    
    stats_text += f"\n*–í—Å–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π*: {stats['total_distributions']}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=stats_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ADMIN_STATS

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = user_service.get_all_users()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* ({len(users)})\n\n"
    
    for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        admin_mark = "üëë " if user.is_admin else ""
        active_mark = "‚úÖ " if user.is_active else "‚ùå "
        users_text += f"{admin_mark}{active_mark}*{user.first_name or ''} {user.last_name or ''}* (@{user.username or '–Ω–µ—Ç'})\n"
    
    if len(users) > 10:
        users_text += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=users_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ADMIN_USERS

async def admin_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = session.query(Category).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_text = f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏* ({len(categories)})\n\n"
    
    for category in categories:
        active_mark = "‚úÖ " if category.is_active else "‚ùå "
        categories_text += f"{active_mark}*{category.name}*\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=categories_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ADMIN_CATEGORIES

async def admin_add_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_categories")]
        ])
    )
    
    return ADMIN_ADD_CATEGORY

async def admin_save_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    category_name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    existing_category = session.query(Category).filter(Category.name == category_name).first()
    
    if existing_category:
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = Category(name=category_name, is_active=True)
        session.add(category)
        session.commit()
        
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    return await admin_categories(update, context)

async def admin_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    cities = session.query(City).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    cities_text = f"üèôÔ∏è *–ì–æ—Ä–æ–¥–∞* ({len(cities)})\n\n"
    
    for city in cities:
        active_mark = "‚úÖ " if city.is_active else "‚ùå "
        cities_text += f"{active_mark}*{city.name}*\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="admin_add_city")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=cities_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ADMIN_CITIES

async def admin_add_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_cities")]
        ])
    )
    
    return ADMIN_ADD_CITY

async def admin_save_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    city_name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥
    existing_city = session.query(City).filter(City.name == city_name).first()
    
    if existing_city:
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
        city = City(name=city_name, is_active=True)
        session.add(city)
        session.commit()
        
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ '{city_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
    return await admin_cities(update, context)

async def admin_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    requests = session.query(Request).order_by(Request.created_at.desc()).limit(10).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
    requests_text = f"üìã *–ó–∞—è–≤–∫–∏* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
    
    for request in requests:
        status_emoji = {
            "–Ω–æ–≤–∞—è": "üÜï",
            "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è": "‚úÖ",
            "–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞—è": "‚ùå",
            "–≤ —Ä–∞–±–æ—Ç–µ": "üîÑ",
            "–∑–∞–º–µ—Ä": "üìè",
            "–æ—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞": "üö´",
            "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚ú®"
        }.get(request.status, "üÜï")
        
        demo_mark = "üé≤ " if request.is_demo else ""
        requests_text += f"{demo_mark}{status_emoji} *#{request.id}* - {request.client_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ({request.created_at.strftime('%d.%m.%Y')})\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_add_request")],
        [InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É", callback_data="admin_create_demo")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=requests_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ADMIN_REQUESTS

async def admin_create_demo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–∑–∞—è–≤–∫—É"""
    session = get_session()
    request_service = RequestService(session)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–∑–∞—è–≤–∫—É
    demo_data = generate_demo_request()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    request = request_service.create_request(demo_data)
    
    await update.callback_query.answer("–î–µ–º–æ-–∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    return await admin_requests(update, context)

async def admin_add_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    categories = session.query(Category).filter(Category.is_active == True).all()
    cities = session.query(City).filter(City.is_active == True).all()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['categories'] = categories
    context.user_data['cities'] = cities
    context.user_data['new_request'] = {}
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_requests")]
        ])
    )
    
    return ADMIN_ADD_REQUEST

def get_admin_conversation_handler() -> ConversationHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_panel, pattern="^admin$")],
        states={
            ADMIN_MAIN: [
                CallbackQueryHandler(admin_stats, pattern="^admin_stats$"),
                CallbackQueryHandler(admin_users, pattern="^admin_users$"),
                CallbackQueryHandler(admin_categories, pattern="^admin_categories$"),
                CallbackQueryHandler(admin_cities, pattern="^admin_cities$"),
                CallbackQueryHandler(admin_requests, pattern="^admin_requests$"),
                CallbackQueryHandler(admin_add_request, pattern="^admin_add_request$"),
                CallbackQueryHandler(admin_create_demo, pattern="^admin_create_demo$"),
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
            ],
            ADMIN_STATS: [
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_USERS: [
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_CATEGORIES: [
                CallbackQueryHandler(admin_add_category, pattern="^admin_add_category$"),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_ADD_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_save_category),
                CallbackQueryHandler(admin_categories, pattern="^back_to_categories$"),
            ],
            ADMIN_CITIES: [
                CallbackQueryHandler(admin_add_city, pattern="^admin_add_city$"),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_ADD_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_save_city),
                CallbackQueryHandler(admin_cities, pattern="^back_to_cities$"),
            ],
            ADMIN_REQUESTS: [
                CallbackQueryHandler(admin_add_request, pattern="^admin_add_request$"),
                CallbackQueryHandler(admin_create_demo, pattern="^admin_create_demo$"),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_ADD_REQUEST: [
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
                CallbackQueryHandler(admin_requests, pattern="^back_to_requests$"),
            ],
        },
        fallbacks=[CallbackQueryHandler(admin_panel, pattern="^admin$")],
    )
