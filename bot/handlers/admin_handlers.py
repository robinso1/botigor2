import logging
from typing import Dict, Any, List, Optional, Union
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.error import TelegramError

from bot.models import get_session, User, Category, City, Request, Distribution
from bot.services.user_service import UserService
from bot.services.request_service import RequestService
from bot.utils.demo_utils import generate_demo_request
from config import ADMIN_IDS, DEFAULT_CATEGORIES, DEFAULT_CITIES
from bot.handlers.user_handlers import show_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    ADMIN_MAIN,
    ADMIN_STATS,
    ADMIN_USERS,
    ADMIN_CATEGORIES,
    ADMIN_CITIES,
    ADMIN_REQUESTS,
    ADMIN_ADD_CATEGORY,
    ADMIN_ADD_CITY,
    ADMIN_ADD_REQUEST,
    ADMIN_REQUEST_DETAILS,
    ADMIN_EDIT_REQUEST,
    ADMIN_EDIT_REQUEST_STATUS,
    ADMIN_EDIT_REQUEST_CATEGORY,
    ADMIN_EDIT_REQUEST_CITY,
    ADMIN_EDIT_REQUEST_CLIENT_NAME,
    ADMIN_EDIT_REQUEST_CLIENT_PHONE,
    ADMIN_EDIT_REQUEST_DESCRIPTION,
    ADMIN_EDIT_REQUEST_AREA,
    ADMIN_EDIT_REQUEST_ADDRESS,
) = range(19)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await show_main_menu(update, context)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ["üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "üèôÔ∏è –ì–æ—Ä–æ–¥–∞"],
        ["üìã –ó–∞—è–≤–∫–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
        ["üé≤ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É"],
        ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:",
            reply_markup=reply_markup
        )
    
    return ADMIN_MAIN

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    session = get_session()
    request_service = RequestService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = request_service.get_request_statistics()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_requests']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {stats['new_requests']}\n"
        f"–í —Ä–∞–±–æ—Ç–µ: {stats['in_progress_requests']}\n"
        f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_requests']}\n"
        f"–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {stats['cancelled_requests']}\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['admin_users']}\n\n"
        f"–ó–∞—è–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_requests']}\n"
        f"–ó–∞—è–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['week_requests']}\n"
        f"–ó–∞—è–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü: {stats['month_requests']}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    keyboard = [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return ADMIN_STATS

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    session = get_session()
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = user_service.get_all_users()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* ({len(users)})\n\n"
    
    for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        admin_mark = "üëë " if user.is_admin else ""
        active_mark = "‚úÖ " if user.is_active else "‚ùå "
        users_text += f"{admin_mark}{active_mark}*{user.first_name or ''} {user.last_name or ''}* (@{user.username or '–Ω–µ—Ç'})\n"
    
    if len(users) > 10:
        users_text += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    keyboard = [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=users_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=users_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return ADMIN_USERS

async def admin_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = session.query(Category).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_text = f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏* ({len(categories)})\n\n"
    
    for category in categories:
        active_mark = "‚úÖ " if category.is_active else "‚ùå "
        categories_text += f"{active_mark}*{category.name}*\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"],
        ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=categories_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=categories_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return ADMIN_CATEGORIES

async def admin_add_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
    
    return ADMIN_ADD_CATEGORY

async def admin_save_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    category_name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    existing_category = session.query(Category).filter(Category.name == category_name).first()
    
    if existing_category:
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = Category(name=category_name, is_active=True)
        session.add(category)
        session.commit()
        
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    return await admin_categories(update, context)

async def admin_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    cities = session.query(City).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    cities_text = f"üèôÔ∏è *–ì–æ—Ä–æ–¥–∞* ({len(cities)})\n\n"
    
    for city in cities:
        active_mark = "‚úÖ " if city.is_active else "‚ùå "
        cities_text += f"{active_mark}*{city.name}*\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"],
        ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=cities_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=cities_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return ADMIN_CITIES

async def admin_add_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
    
    return ADMIN_ADD_CITY

async def admin_save_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    city_name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥
    existing_city = session.query(City).filter(City.name == city_name).first()
    
    if existing_city:
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
        city = City(name=city_name, is_active=True)
        session.add(city)
        session.commit()
        
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ '{city_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
    return await admin_cities(update, context)

async def admin_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    requests = session.query(Request).order_by(Request.created_at.desc()).limit(10).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
    requests_text = f"üìã *–ó–∞—è–≤–∫–∏* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
    
    for request in requests:
        status_emoji = {
            "–Ω–æ–≤–∞—è": "üÜï",
            "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è": "‚úÖ",
            "–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞—è": "‚ùå",
            "–≤ —Ä–∞–±–æ—Ç–µ": "üîÑ",
            "–∑–∞–º–µ—Ä": "üìè",
            "–æ—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞": "üö´",
            "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚ú®"
        }.get(request.status, "üÜï")
        
        demo_mark = "üé≤ " if request.is_demo else ""
        requests_text += f"{demo_mark}{status_emoji} *#{request.id}* - {request.client_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ({request.created_at.strftime('%d.%m.%Y')})\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
        ["üé≤ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É"],
        ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=requests_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=requests_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return ADMIN_REQUESTS

async def admin_create_demo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–∑–∞—è–≤–∫—É"""
    session = get_session()
    request_service = RequestService(session)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–∑–∞—è–≤–∫—É
    demo_data = generate_demo_request()
    demo_data['is_demo'] = True
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    request = request_service.create_request(demo_data)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—è–≤–∫—É
    distributions = request_service.distribute_request(request.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_text = f"‚úÖ –î–µ–º–æ-–∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!\n\n"
    success_text += f"ID: {request.id}\n"
    success_text += f"–ö–ª–∏–µ–Ω—Ç: {request.client_name}\n"
    success_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {request.client_phone}\n"
    success_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category.name if request.category else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
    success_text += f"–ì–æ—Ä–æ–¥: {request.city.name if request.city else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    success_text += f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {len(distributions)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=success_text,
            reply_markup=ReplyKeyboardMarkup([["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            text=success_text,
            reply_markup=ReplyKeyboardMarkup([["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]], resize_keyboard=True)
        )
    
    return ADMIN_MAIN

async def admin_add_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    categories = session.query(Category).filter(Category.is_active == True).all()
    cities = session.query(City).filter(City.is_active == True).all()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['categories'] = categories
    context.user_data['cities'] = cities
    context.user_data['new_request'] = {}
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    if update.callback_query:
        update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
    
    return ADMIN_ADD_REQUEST

def get_admin_conversation_handler() -> ConversationHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return ConversationHandler(
        entry_points=[CommandHandler('admin', admin_panel)],
        states={
            ADMIN_MAIN: [
                MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), admin_stats),
                MessageHandler(filters.Regex('^üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏$'), admin_users),
                MessageHandler(filters.Regex('^üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏$'), admin_categories),
                MessageHandler(filters.Regex('^üèôÔ∏è –ì–æ—Ä–æ–¥–∞$'), admin_cities),
                MessageHandler(filters.Regex('^üìã –ó–∞—è–≤–∫–∏$'), admin_requests),
                MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$'), admin_add_request),
                MessageHandler(filters.Regex('^üé≤ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É$'), admin_create_demo),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), lambda u, c: show_main_menu(u, c)),
                # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback_query –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                CallbackQueryHandler(admin_stats, pattern='^admin_stats$'),
                CallbackQueryHandler(admin_users, pattern='^admin_users$'),
                CallbackQueryHandler(admin_categories, pattern='^admin_categories$'),
                CallbackQueryHandler(admin_cities, pattern='^admin_cities$'),
                CallbackQueryHandler(admin_requests, pattern='^admin_requests$'),
                CallbackQueryHandler(admin_add_request, pattern='^admin_add_request$'),
                CallbackQueryHandler(admin_create_demo, pattern='^admin_create_demo$'),
                CallbackQueryHandler(lambda u, c: show_main_menu(u, c), pattern='^back_to_main$'),
            ],
            ADMIN_STATS: [
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), admin_panel),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_USERS: [
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), admin_panel),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_CATEGORIES: [
                MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é$'), admin_add_category),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), admin_panel),
                CallbackQueryHandler(admin_add_category, pattern="^admin_add_category$"),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_ADD_CATEGORY: [
                MessageHandler(filters.Regex('^üîô –û—Ç–º–µ–Ω–∞$'), admin_categories),
                MessageHandler(filters.text & ~filters.command, admin_save_category),
                CallbackQueryHandler(admin_categories, pattern="^back_to_categories$"),
            ],
            ADMIN_CITIES: [
                MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥$'), admin_add_city),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), admin_panel),
                CallbackQueryHandler(admin_add_city, pattern="^admin_add_city$"),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_ADD_CITY: [
                MessageHandler(filters.Regex('^üîô –û—Ç–º–µ–Ω–∞$'), admin_cities),
                MessageHandler(filters.text & ~filters.command, admin_save_city),
                CallbackQueryHandler(admin_cities, pattern="^back_to_cities$"),
            ],
            ADMIN_REQUESTS: [
                MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$'), admin_add_request),
                MessageHandler(filters.Regex('^üé≤ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫—É$'), admin_create_demo),
                MessageHandler(filters.Regex('^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), admin_panel),
                CallbackQueryHandler(admin_add_request, pattern="^admin_add_request$"),
                CallbackQueryHandler(admin_create_demo, pattern="^admin_create_demo$"),
                CallbackQueryHandler(admin_panel, pattern="^back_to_admin$"),
            ],
            ADMIN_ADD_REQUEST: [
                MessageHandler(filters.Regex('^üîô –û—Ç–º–µ–Ω–∞$'), admin_requests),
                MessageHandler(filters.text & ~filters.command, lambda u, c: admin_save_city(u, c)),  # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
                CallbackQueryHandler(admin_requests, pattern="^back_to_requests$"),
            ],
        },
        fallbacks=[CommandHandler('admin', admin_panel), CommandHandler('start', lambda u, c: show_main_menu(u, c))],
        name="admin_conversation",
        persistent=False
    )

def admin_conversation_handler() -> ConversationHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return get_admin_conversation_handler()
